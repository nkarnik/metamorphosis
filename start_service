#!/usr/bin/env ruby

require "optparse"
require 'json'
require 'pry'
HIPCHAT_API_TOKEN = "41005d1d7b1a5cdc86dc2d9db1b620"
HIPCHAT_MAIN_ROOM = "Zillabyte"
DEFAULT_KAFKA_PORT = 9092

if ENV['BUNDLE_GEMFILE']
  # NOTE: start_gmb CANNOT be run under bundler.  Why? because bundler doesn't play
  # well with nested bundler invocations.  That is, bunder sets environment variabes
  # that will cause GMB to behave incorrectly when shelling out and running CLI
  # commands.
  STDERR << "\nThis script should not be run under bundler; otherwise chaos ensues for shelled CLI commands. Sorry.\n\n" 
  exit(1)
end

def find_nodes(env, role, attrib = 'fqdn')
  results = `knife search node "role:#{role} AND chef_environment:#{env}" -F json -a #{attrib}  -c ~/zb1/infrastructure/chef/.chef/knife.rb`
  hash = JSON.parse(results)
  hash["rows"].map do |rec|
    rec.values.first[attrib]
  end
end

options = {}
opt_parser = OptionParser.new(:unknown_options_action => :collect) do |opt|
  opt.banner = "Usage: start_service [environment] [schloss/worker] -- [JVM ARGS]"
    opt.on("-h","--help","help") do
    puts opt_parser
    exit
  end

end

opt_parser.parse!
service = ARGV.shift
hostname = `hostname`.chomp + ".ec2.internal"
puts "hostname is #{hostname}"
env = `grep "^node_name " /etc/chef/client.rb`.split(" ").last.gsub('"',"").split(".").first

kafka_brokers = find_nodes(env, "kafka_broker")
puts "List of brokers found: #{kafka_brokers.join(',')}"
kafka_brokers_hosts_string = kafka_brokers.map{|b| b + ":#{DEFAULT_KAFKA_PORT}"}.join(',')
kafka_zookeeper = find_nodes(env, "kafka_zookeeper").first()

elasticsearch_nodes = find_nodes(env, "elasticsearch").map{|a| a.gsub(".ec2.internal", "").gsub("ip-", "").gsub("-",".")}.join(",")
puts "List of elasticsearch nodes found: #{elasticsearch_nodes}"

case service
when "schloss"
  metamorphosis_source_topic = "source_queue"
  metamorphosis_sink_topic = "sink_queue"
  worker_source_queues = kafka_brokers.size.times.map{|i| "worker_source_queue_#{i}"}.join(",")
  worker_sink_queues = kafka_brokers.size.times.map{|i| "worker_sink_queue_#{i}"}.join(",")
  service_args = <<-SARGS
 --schloss.source.queue #{metamorphosis_source_topic}\
 --schloss.sink.queue #{metamorphosis_sink_topic}\
 --worker.source.queues #{worker_source_queues}\
 --worker.sink.queues #{worker_sink_queues}
SARGS
when "worker"
  broker_num = kafka_brokers.sort.index hostname
  if broker_num.nil?
    puts "ERROR: Cannot assign broker num. #{hostname} is not found in the list of brokers: #{kafka_brokers.join(",")}"
    exit
  end
  puts "Queue num is #{broker_num}"
  
  worker_source_queue = "worker_source_queue_#{broker_num}"
  worker_sink_queue = "worker_sink_queue_#{broker_num}"
  service_args = <<-SARGS
 --worker.source.queue #{worker_source_queue}\
 --worker.sink.queue #{worker_sink_queue}
SARGS
else
  puts "Unsupported service: #{service}"
  exit
end
kafka_consumer_timeout = "10000"

#To allow debugging from eclipse while running on vagrant/test/prod. add at the start of -Dexec.args="
jvm_debug=""
#jvm_debug="-Xdebug -Xrunjdwp:transport=dt_socket,address=8001,server=y,suspend=y"

command = <<-CMD       
mvn clean compile; \
mvn exec:exec -Dexec.classpathScope=\"compile\" -Dexec.executable=\"java\" \
-Dexec.args=\"#{jvm_debug} -Xmx8g -classpath %classpath \
metamorphosis.MetamorphosisService\
 --environment #{env}
 --kafka.brokers #{kafka_brokers_hosts_string}\
 --kafka.zookeeper.host #{kafka_zookeeper}\
 --kafka.consumer.timeout.ms #{kafka_consumer_timeout}\
 --elasticsearch.hosts #{elasticsearch_nodes}\
 --service #{service}\
 #{service_args}\"
CMD
puts command

system command


